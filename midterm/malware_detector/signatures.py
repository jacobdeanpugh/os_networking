import hashlib
import os
import requests
from .config import config
from .logger import logger

class Signature_Manager():

    def __init__(self):
        self.key = config["signatures"]['malware_bazzar_api_key']
        self.endpoint = config["signatures"]['malware_bazzar_endpoint']


    def generate_file_sha256(self, file):
        m = hashlib.sha256()
        try:
            m.update(file)
            return m.hexdigest()
        except Exception as e:
            logger.error(f"Error Occured Hashing File: {e}")
            raise Exception(e)


    def get_file_bytes(self, file_path):
        try:
            with open(file_path, 'rb') as f:
                return f.read()
        except Exception as e:
            logger.error(f"Error Occured Getting File Bytes: {e}")
            raise Exception(e)

    def query_file_hash(self, file_hash):
        headers = {
            "Auth-Key": self.key
        }
        data = {
            "query": "get_info",
            "hash" : file_hash
        }

        response = requests.post(self.endpoint, headers=headers, data=data)
        try:
            response.raise_for_status()
        except Exception as e:
            logger.error(f"Error Occured Querying File Hash: {e}")
            raise Exception(e)
        return response
    
    def is_file_signature_malware(self, file_path):
        try:
            file_bytes = self.get_file_bytes(file_path)
            file_sha256 = self.generate_file_sha256(file_bytes)
            query_response = self.query_file_hash(file_sha256).json()

            if query_response.get("file_name", None) is None:
                logger.info(f"File signature not found in Malware Database: {file_path}")
                return False
            
        except Exception as e:
            logger.error("File Signature Query Failed")
            return None
        
        logger.info(f"Malware Detected! {file_path}")
        return True


